<idea-plugin>
    <id>io.yansq.mybatis-sql-viewer</id>
    <name>Mybatis Sql Viewer</name>
    <vendor email="felzyan33@gmail.com" url="https://github.com/yansq">yansq</vendor>

    <description><![CDATA[

    Mybatis-SQL-Viewer is a plugin that improves the efficiency and quality of writing SQL when CRUD, supporting both mybatis and non-mybatis modes. The main functions are as follows:<br/>
    <ul>
        <li>Supports mybatis mode and non-mybatis mode</li>
        <li>SQL specification check</li>
        <li>SQL index check</li>
        <li>SQL stress</li>
        <li>Table-building specification check</li>
        <li>Table index specification check</li>
        <li>Table data mock</li>
        <li>Supports file and project dimensions MyBatis SQL scanning</li>
    </ul>
    <br/>
    Mybatis-Sql-Viewer是一款提高CRUD时编写SQL效率和质量的插件，支持mybatis模式和非mybatis模式。主要功能如下：<br/>

    <b>mybatis模式(自动生成SQL语句, 包含非mybatis模式的功能)</b>
    <ul>
        <li>mapper接口方法跳转到xml实现及xml实现跳转到对应mapper接口方法</li>
        <li>mapper接口方法参数mock，并使用该参数将mapper接口方法的xml实现转换成sql语句</li>
        <li>mybatis sql扫描，支持文件维度和项目维度进行扫描，并对SQL语句进行规约检查及索引检查</li>
    </ul>

    <b>非mybatis模式(手动输入SQL语句)</b>
    <ul>
        <li>SQL语句规约检查</li>
        <li>SQL语句执行，返回执行结果及执行计划</li>
        <li>SQL语句压测并输出压测报告</li>
        <li>展示SQL语句中包含表的元数据信息，并进行建表规约检查</li>
        <li>展示SQL语句中包含表的索引信息，并进行索引规约检查</li>
        <li>对SQL语句中包含的表进行数据mock，支持多种mock规则及大批量数据mock</li>
    </ul>

    <br/>
    <a href="https://github.com/yansq/mybatis-sql-viewer">Github</a> 欢迎star，
    该项目fork自<a href="https://github.com/linyimin0812/mybatis-sql-viewer">mybatis-sql-viewer</a>，原作者为<a href="https://github.com/linyimin0812">linyimin0812</a>
    <br/>
    ]]></description>

    <!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.java</depends>

    <extensions defaultExtensionNs="com.intellij">
        <!-- Add your extensions here -->

        <codeInsight.lineMarkerProvider id="mybatis.sql.viewer.MapperInterfaceJumpLineMakerProvider" language="JAVA" implementationClass="io.github.linyimin.plugin.provider.jump.MapperInterfaceJumpLineMakerProvider" />
        <codeInsight.lineMarkerProvider id="mybatis.sql.viewer.MapperXmlJumpLineMakerProvider" language="XML" implementationClass="io.github.linyimin.plugin.provider.jump.MapperXmlJumpLineMakerProvider" />
        <codeInsight.lineMarkerProvider id="mybatis.sql.viewer.MapperInterfaceGenerateSqlLineMakerProvider" language="JAVA" implementationClass="io.github.linyimin.plugin.provider.generate.MapperInterfaceGenerateSqlLineMakerProvider" />
        <codeInsight.lineMarkerProvider id="mybatis.sql.viewer.MapperXmlGenerateSqlLineMakerProvider" language="XML" implementationClass="io.github.linyimin.plugin.provider.generate.MapperXmlGenerateSqlLineMakerProvider" />

        <projectService serviceImplementation="io.github.linyimin.plugin.configuration.MybatisSqlStateComponent" order="first" />
        <projectService serviceImplementation="io.github.linyimin.plugin.sql.DatasourceComponent" order="first" />
        <applicationService serviceImplementation="io.github.linyimin.plugin.settings.SqlViewerSettingsState"/>

        <toolWindow id="mybatis-sql-viewer" icon="/mybatis-sql-viewer.svg" doNotActivateOnStart="true" factoryClass="io.github.linyimin.plugin.ui.MybatisSqlViewerToolWindowFactory" anchor="bottom" secondary="false" />

        <applicationConfigurable parentId="tools" instance="io.github.linyimin.plugin.ui.SqlViewerSettingsPanel"
                                 id="io.github.linyimin.plugin.settings.SqlViewerSettings"
                                 displayName="Mybatis Sql Viewer"/>

    </extensions>

    <project-components>
        <component>
            <implementation-class>io.github.linyimin.plugin.configuration.MockDataSaveComponent</implementation-class>
        </component>
    </project-components>

    <application-components>
        <component>
            <implementation-class>io.github.linyimin.plugin.configuration.DatasourceConfigComponent</implementation-class>
        </component>
        <component>
            <implementation-class>io.github.linyimin.plugin.configuration.LexiconComponent</implementation-class>
        </component>
    </application-components>

    <actions>
        <!-- Add your actions here -->
    </actions>
</idea-plugin>